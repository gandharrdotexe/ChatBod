JavaScript files in /Users/mithra707/Documents/CHATBOD:

frontend/src/App.jsx
// Content of frontend/src/App.jsx:


import { useState, useRef, useEffect } from "react"
import ChatMessage from "./components/ChatMessage"
import ThinkingIndicator from "./components/ThinkingIndicator"

function App() {
  const [messages, setMessages] = useState([])
  const [input, setInput] = useState("")
  const [isThinking, setIsThinking] = useState(false)
  const messagesEndRef = useRef(null)

  // Scroll to bottom whenever messages change
  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  const handleSubmit = async (e) => {
    e.preventDefault()

    //Yadavar Saab
  }

  return (
    <div className="flex flex-col h-screen bg-gray-100">
      
      <header className="bg-white shadow-sm py-4 px-6">
        <h1 className="text-xl font-bold text-gray-800">AI Chatbot</h1>
      </header>

      
      <div className="flex-1 overflow-hidden flex flex-col w-full mx-auto p-4">
        
        <div className="flex-1 overflow-y-auto mb-4 space-y-4 p-4 rounded-lg bg-white shadow-sm ">
          {messages.length === 0 ? (
            <div className="flex items-center justify-center h-full">
              <div className="text-center space-y-2 max-w-md">
                <h2 className="text-xl font-semibold text-gray-700">Welcome to the AI Chatbot</h2>
                <p className="text-gray-500">Type a message to start the conversation.</p>
              </div>
            </div>
          ) : (
            messages.map((message, index) => <ChatMessage key={index} role={message.role} content={message.content} />)
          )}

          
          {isThinking && <ThinkingIndicator />}

          
          <div ref={messagesEndRef} />
        </div>

        
        <form onSubmit={handleSubmit} className="flex items-center space-x-2 bg-white p-2 rounded-lg shadow-sm">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Type your message..."
            className="flex-1 px-4 py-2 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            disabled={isThinking}
          />
          <button
            type="submit"
            disabled={isThinking || !input.trim()}
            className="bg-blue-600 text-white p-2 rounded-full w-10 h-10 flex items-center justify-center disabled:bg-blue-400 disabled:cursor-not-allowed"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z" />
            </svg>
          </button>
        </form>
      </div>
    </div>
  )
}

export default App



frontend/src/main.jsx
// Content of frontend/src/main.jsx:
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)


frontend/src/components/ChatMessage.jsx
// Content of frontend/src/components/ChatMessage.jsx:
const ChatMessage = ({ role, content }) => {
    const isUser = role === "user"
  
    return (
      <div className={`flex ${isUser ? "justify-end" : "justify-start"}`}>
        <div
          className={`max-w-[80%] px-4 py-2 rounded-lg ${
            isUser ? "bg-blue-600 text-white rounded-br-none" : "bg-gray-100 text-gray-800 rounded-bl-none"
          }`}
        >
          {content}
        </div>
      </div>
    )
  }
  
  export default ChatMessage
  
  

frontend/src/components/ThinkingIndicator.jsx
// Content of frontend/src/components/ThinkingIndicator.jsx:
const ThinkingIndicator = () => {
    return (
      <div className="flex justify-start">
        <div className="bg-gray-100 text-gray-800 px-4 py-2 rounded-lg rounded-bl-none max-w-[80%]">
          <div className="flex items-center space-x-2">
            <span className="text-gray-700">Thinking</span>
            <span className="flex space-x-1">
              <span className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: "0ms" }}></span>
              <span
                className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                style={{ animationDelay: "150ms" }}
              ></span>
              <span
                className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                style={{ animationDelay: "300ms" }}
              ></span>
            </span>
          </div>
        </div>
      </div>
    )
  }
  
  export default ThinkingIndicator
  
  

